/**
 * type包中的类有 55个之多。在遇到这种繁杂的情况时，一定要注意归类总结。
 * 归类总结是源码阅读中非常好的办法。往往越是大量的类，越是大量的方法，越有规律进行分类。这些原本繁杂的类和方法经过分类后，可能会变得很有条理。
 * 经过梳理后，我们把 type包内的类分为以下六组。
 * <p>
 * · 类型处理器：1个接口、1个基础实现类、1个辅助类、43个实现类。
 * -TypeHandler：类型处理器接口；
 * -BaseTypeHandler：类型处理器的基础实现；
 * -TypeReference：类型参考器；
 * -*TypeHandler：43个类型处理器。
 * <p>
 * · 类型注册表：3个。
 * -SimpleTypeRegistry：基本类型注册表，内部使用 Set 维护了所有 Java 基本数据类型的集合；
 * -TypeAliasRegistry：类型别名注册表，内部使用 HashMap维护了所有类型的别名和类型的映射关系；
 * -TypeHandlerRegistry：类型处理器注册表，内部维护了所有类型与对应类型处理器的映射关系。
 * <p>
 * · 注解类：3个。
 * -Alias：使用该注解可以给类设置别名，设置后，别名和类型的映射关系便存入TypeAliasRegistry中；
 * -MappedJdbcTypes：有时我们想使用自己的处理器来处理某些 JDBC 类型，只需创建 BaseTypeHandler 的子类，然后在上面加上该注解，声明它要处理的JDBC类型即可；
 * -MappedTypes：有时我们想使用自己的处理器来处理某些Java类型，只需创建BaseTypeHandler的子类，然后在上面加上该注解，声明它要处理的 Java类型即可。
 * <p>
 * · 异常类：1个。
 * -TypeException：表示与类型处理相关的异常。
 * <p>
 * · 工具类：1个。
 * -ByteArrayUtils：提供数组转化的工具方法。
 * <p>
 * · 枚举类：1个。
 * -JdbcType：在 Enum中定义了所有的 JDBC类型，类型来源于 java.sql.Types。
 * <p>
 * 以上类中，注解类、异常类、工具类、枚举类都非常简单，不再单独介绍。下面将重点介绍类型处理器和类型注册表。
 */
/**
 * 说起模板大家应该都很熟悉。一般情况下，模板中规定了大体的框架，只留下一些细节供使用者来修改和完善。使用同一模板做出的不同产品都具有一致的框架。
 * 设计模式中的模板模式与上述模板的概念相同。在模板模式中，需要使用一个抽象类定义一套操作的整体步骤（即模板），而抽象类的子类则完成每个步骤的具体实现。这样，抽象类的不同子类遵循了同样的一套模板。
 * 例如，我们定义一套打扫卫生的模板，如代码8-1 所示。它为所有的打扫卫生工作定义了四个大的步骤：准备（prepare）、实施（implement）、善后（windup）和汇报（report）。
 */
package org.apache.ibatis.type;
